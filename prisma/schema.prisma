// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int     @id @default(autoincrement())
  email             String  @unique
  password          String
  name              String?
  lastName          String?
  age               Int?
  verificationToken String? @default(cuid()) @map("verification_token")
  rights            Role[]  @default([USER])

  orders             Order[]        @relation("UserOrders")
  conversationsUser1 Conversation[] @relation("UserConversationsUser1")
  conversationsUser2 Conversation[] @relation("UserConversationsUser2")
  Message            Message[]
}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String
  location    String
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation("UserOrders", fields: [userId], references: [id])
}

model Conversation {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  createdAt DateTime @default(now())

  user1    User      @relation("UserConversationsUser1", fields: [user1Id], references: [id])
  user2    User      @relation("UserConversationsUser2", fields: [user2Id], references: [id])
  messages Message[]
}

model Message {
  id             Int      @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String
  sentAt         DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id])
  sender       User         @relation(fields: [senderId], references: [id])
}

enum Role {
  USER
  ADMIN
}
